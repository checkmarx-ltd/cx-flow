
package com.checkmarx.flow.gitdashboardnewverfifteen.SCA;

import com.fasterxml.jackson.annotation.*;
import lombok.Builder;
import lombok.Data;

import javax.annotation.Generated;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Describes the vulnerability using GitLab Flavored Markdown
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
        "id",
        "name",
        "description",
        "severity",
        "solution",
        "identifiers",
        "links",
        "details",
        "tracking",
        "flags",
        "location"
})
@Generated("jsonschema2pojo")
@Builder
@Data
public class Vulnerability {

    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * (Required)
     *
     */
    @JsonProperty("id")
    @JsonPropertyDescription("Unique identifier of the vulnerability. This is recommended to be a UUID.")
    private String id;
    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     *
     */
    @JsonProperty("name")
    @JsonPropertyDescription("The name of the vulnerability. This must not include the finding's specific information.")
    private String name;
    /**
     * A long text section describing the vulnerability more fully.
     *
     */
    @JsonProperty("description")
    @JsonPropertyDescription("A long text section describing the vulnerability more fully.")
    private String description;
    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     *
     */
    @JsonProperty("severity")
    @JsonPropertyDescription("How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.")
    private Severity severity;
    /**
     * Explanation of how to fix the vulnerability.
     *
     */
    @JsonProperty("solution")
    @JsonPropertyDescription("Explanation of how to fix the vulnerability.")
    private String solution;
    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     *
     */
    @JsonProperty("identifiers")
    @JsonPropertyDescription("An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.")
    @Builder.Default
    private List<Identifier> identifiers = null;
    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     *
     */
    @JsonProperty("links")
    @JsonPropertyDescription("An array of references to external documentation or articles that describe the vulnerability.")
    @Builder.Default
    private List<Link> links = null;
    @JsonProperty("details")
    private Items details;
    /**
     * Describes how this vulnerability should be tracked as the project changes.
     *
     */
    @JsonProperty("tracking")
    @JsonPropertyDescription("Describes how this vulnerability should be tracked as the project changes.")
    private Tracking tracking;
    /**
     * Flags that can be attached to vulnerabilities.
     *
     */
    @JsonProperty("flags")
    @JsonPropertyDescription("Flags that can be attached to vulnerabilities.")
    @Builder.Default
    private List<Flag> flags = null;
    /**
     * Identifies the vulnerability's location.
     * (Required)
     *
     */
    @JsonProperty("location")
    @JsonPropertyDescription("Identifies the vulnerability's location.")
    private Location location;


    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * (Required)
     *
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * (Required)
     *
     */
    @JsonProperty("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     *
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     *
     */
    @JsonProperty("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * A long text section describing the vulnerability more fully.
     *
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * A long text section describing the vulnerability more fully.
     *
     */
    @JsonProperty("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     *
     */
    @JsonProperty("severity")
    public Severity getSeverity() {
        return severity;
    }

    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     *
     */
    @JsonProperty("severity")
    public void setSeverity(Severity severity) {
        this.severity = severity;
    }

    /**
     * Explanation of how to fix the vulnerability.
     *
     */
    @JsonProperty("solution")
    public String getSolution() {
        return solution;
    }

    /**
     * Explanation of how to fix the vulnerability.
     *
     */
    @JsonProperty("solution")
    public void setSolution(String solution) {
        this.solution = solution;
    }

    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     *
     */
    @JsonProperty("identifiers")
    public List<Identifier> getIdentifiers() {
        return identifiers;
    }

    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     *
     */
    @JsonProperty("identifiers")
    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     *
     */
    @JsonProperty("links")
    public List<Link> getLinks() {
        return links;
    }

    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     *
     */
    @JsonProperty("links")
    public void setLinks(List<Link> links) {
        this.links = links;
    }

    @JsonProperty("details")
    public Items getDetails() {
        return details;
    }

    @JsonProperty("details")
    public void setDetails(Items details) {
        this.details = details;
    }

    /**
     * Describes how this vulnerability should be tracked as the project changes.
     *
     */
    @JsonProperty("tracking")
    public Tracking getTracking() {
        return tracking;
    }

    /**
     * Describes how this vulnerability should be tracked as the project changes.
     *
     */
    @JsonProperty("tracking")
    public void setTracking(Tracking tracking) {
        this.tracking = tracking;
    }

    /**
     * Flags that can be attached to vulnerabilities.
     *
     */
    @JsonProperty("flags")
    public List<Flag> getFlags() {
        return flags;
    }

    /**
     * Flags that can be attached to vulnerabilities.
     *
     */
    @JsonProperty("flags")
    public void setFlags(List<Flag> flags) {
        this.flags = flags;
    }

    /**
     * Identifies the vulnerability's location.
     * (Required)
     *
     */
    @JsonProperty("location")
    public Location getLocation() {
        return location;
    }

    /**
     * Identifies the vulnerability's location.
     * (Required)
     *
     */
    @JsonProperty("location")
    public void setLocation(Location location) {
        this.location = location;
    }




    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     *
     */
    @Generated("jsonschema2pojo")
    public enum Severity {

        Info("Info"),
        INFO("Info"),
        Unknown("Unknown"),
        UNKNOWN("Unknown"),
        Low("Low"),
        LOW("Low"),
        Medium("Medium"),
        MEDIUM("Medium"),
        High("High"),
        HIGH("High"),
        CRITICAL("CRITICAL"),
        Critical("CRITICAL"),
        Information("Information"),
        INFORMATION("Information");
        private final String value;
        private final static Map<String, Severity> CONSTANTS = new HashMap<String, Severity>();

        static {
            for (Severity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Severity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Severity fromValue(String value) {
            Severity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}

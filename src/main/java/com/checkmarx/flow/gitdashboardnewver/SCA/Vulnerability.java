
package com.checkmarx.flow.gitdashboardnewver.SCA;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

import com.checkmarx.flow.gitdashboardnewver.*;
import com.checkmarx.flow.gitdashboardnewver.Tracking;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.Builder;
import lombok.Data;


/**
 * Describes the vulnerability using GitLab Flavored Markdown
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "id",
    "category",
    "name",
    "message",
    "description",
    "cve",
    "severity",
    "confidence",
    "solution",
    "scanner",
    "identifiers",
    "links",
    "details",
    "tracking",
    "flags",
    "location"
})
@Generated("jsonschema2pojo")
@Data
@Builder
public class Vulnerability {

    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * 
     */
    @JsonProperty("id")
    @JsonPropertyDescription("Unique identifier of the vulnerability. This is recommended to be a UUID.")
    private String id;
    /**
     * Describes where this vulnerability belongs (for example, SAST, Dependency Scanning, and so on).
     * (Required)
     * 
     */
    @JsonProperty("category")
    @JsonPropertyDescription("Describes where this vulnerability belongs (for example, SAST, Dependency Scanning, and so on).")
    private String category;
    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     * 
     */
    @JsonProperty("name")
    @JsonPropertyDescription("The name of the vulnerability. This must not include the finding's specific information.")
    private String name;
    /**
     * A short text section that describes the vulnerability. This may include the finding's specific information.
     * 
     */
    @JsonProperty("message")
    @JsonPropertyDescription("A short text section that describes the vulnerability. This may include the finding's specific information.")
    private String message;
    /**
     * A long text section describing the vulnerability more fully.
     * 
     */
    @JsonProperty("description")
    @JsonPropertyDescription("A long text section describing the vulnerability more fully.")
    private String description;
    /**
     * (Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.
     * (Required)
     * 
     */
    @JsonProperty("cve")
    @JsonPropertyDescription("(Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.")
    private String cve;
    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("severity")
    @JsonPropertyDescription("How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.")
    private Severity severity;
    /**
     * How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("confidence")
    @JsonPropertyDescription("How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.")
    private Confidence confidence;
    /**
     * Explanation of how to fix the vulnerability.
     * 
     */
    @JsonProperty("solution")
    @JsonPropertyDescription("Explanation of how to fix the vulnerability.")
    private String solution;
    /**
     * Describes the scanner used to find this vulnerability.
     * (Required)
     * 
     */
    @JsonProperty("scanner")
    @JsonPropertyDescription("Describes the scanner used to find this vulnerability.")
    private Scanner__1 scanner;
    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     * 
     */
    @JsonProperty("identifiers")
    @JsonPropertyDescription("An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.")
    private List<Identifier> identifiers = null;
    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     * 
     */
    @JsonProperty("links")
    @JsonPropertyDescription("An array of references to external documentation or articles that describe the vulnerability.")
    private List<Link> links = null;
    @JsonProperty("details")
    private Items details;
    /**
     * Describes how this vulnerability should be tracked as the project changes.
     * 
     */
    @JsonProperty("tracking")
    @JsonPropertyDescription("Describes how this vulnerability should be tracked as the project changes.")
    private com.checkmarx.flow.gitdashboardnewver.SCA.Tracking tracking;
    /**
     * Flags that can be attached to vulnerabilities.
     * 
     */
    @JsonProperty("flags")
    @JsonPropertyDescription("Flags that can be attached to vulnerabilities.")
    private List<Flag> flags = null;
    /**
     * Identifies the vulnerability's location.
     * (Required)
     * 
     */
    @JsonProperty("location")
    @JsonPropertyDescription("Identifies the vulnerability's location.")
    private LocationSCA location;
    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * 
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     * 
     */
    @JsonProperty("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Describes where this vulnerability belongs (for example, SAST, Dependency Scanning, and so on).
     * (Required)
     * 
     */
    @JsonProperty("category")
    public String getCategory() {
        return category;
    }

    /**
     * Describes where this vulnerability belongs (for example, SAST, Dependency Scanning, and so on).
     * (Required)
     * 
     */
    @JsonProperty("category")
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     * 
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     * 
     */
    @JsonProperty("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * A short text section that describes the vulnerability. This may include the finding's specific information.
     * 
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * A short text section that describes the vulnerability. This may include the finding's specific information.
     * 
     */
    @JsonProperty("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * A long text section describing the vulnerability more fully.
     * 
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * A long text section describing the vulnerability more fully.
     * 
     */
    @JsonProperty("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * (Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.
     * (Required)
     * 
     */
    @JsonProperty("cve")
    public String getCve() {
        return cve;
    }

    /**
     * (Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.
     * (Required)
     * 
     */
    @JsonProperty("cve")
    public void setCve(String cve) {
        this.cve = cve;
    }

    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("severity")
    public Severity getSeverity() {
        return severity;
    }

    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("severity")
    public void setSeverity(Severity severity) {
        this.severity = severity;
    }

    /**
     * How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("confidence")
    public Confidence getConfidence() {
        return confidence;
    }

    /**
     * How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.
     * 
     */
    @JsonProperty("confidence")
    public void setConfidence(Confidence confidence) {
        this.confidence = confidence;
    }

    /**
     * Explanation of how to fix the vulnerability.
     * 
     */
    @JsonProperty("solution")
    public String getSolution() {
        return solution;
    }

    /**
     * Explanation of how to fix the vulnerability.
     * 
     */
    @JsonProperty("solution")
    public void setSolution(String solution) {
        this.solution = solution;
    }

    /**
     * Describes the scanner used to find this vulnerability.
     * (Required)
     * 
     */
    @JsonProperty("scanner")
    public Scanner__1 getScanner() {
        return scanner;
    }

    /**
     * Describes the scanner used to find this vulnerability.
     * (Required)
     * 
     */
    @JsonProperty("scanner")
    public void setScanner(Scanner__1 scanner) {
        this.scanner = scanner;
    }

    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     * 
     */
    @JsonProperty("identifiers")
    public List<Identifier> getIdentifiers() {
        return identifiers;
    }

    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     * (Required)
     * 
     */
    @JsonProperty("identifiers")
    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     * 
     */
    @JsonProperty("links")
    public List<Link> getLinks() {
        return links;
    }

    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     * 
     */
    @JsonProperty("links")
    public void setLinks(List<Link> links) {
        this.links = links;
    }

    @JsonProperty("details")
    public Items getDetails() {
        return details;
    }

    @JsonProperty("details")
    public void setDetails(Items details) {
        this.details = details;
    }

    /**
     * Describes how this vulnerability should be tracked as the project changes.
     * 
     */
    @JsonProperty("tracking")
    public com.checkmarx.flow.gitdashboardnewver.SCA.Tracking getTracking() {
        return tracking;
    }

    /**
     * Describes how this vulnerability should be tracked as the project changes.
     * 
     */
    @JsonProperty("tracking")
    public void setTracking(com.checkmarx.flow.gitdashboardnewver.SCA.Tracking tracking) {
        this.tracking = tracking;
    }

    /**
     * Flags that can be attached to vulnerabilities.
     * 
     */
    @JsonProperty("flags")
    public List<Flag> getFlags() {
        return flags;
    }

    /**
     * Flags that can be attached to vulnerabilities.
     * 
     */
    @JsonProperty("flags")
    public void setFlags(List<Flag> flags) {
        this.flags = flags;
    }

    /**
     * Identifies the vulnerability's location.
     * (Required)
     * 
     */
    @JsonProperty("location")
    public LocationSCA getLocation() {
        return location;
    }

    /**
     * Identifies the vulnerability's location.
     * (Required)
     * 
     */
    @JsonProperty("location")
    public void setLocation(LocationSCA location) {
        this.location = location;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }


    /**
     * How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.
     * 
     */
    @Generated("jsonschema2pojo")
    public enum Confidence {

        Experimental("Experimental"),
        EXPERIMENTAL("Experimental"),
        Ignore("Ignore"),
        IGNORE("Ignore"),
        Info("Info"),
        INFO("Info"),
        Unknown("Unknown"),
        UNKNOWN("Unknown"),
        Low("Low"),
        LOW("Low"),
        Medium("Medium"),
        MEDIUM("Medium"),
        High("High"),
        HIGH("High"),
        CRITICAL("Critical"),
        Critical("Critical"),
        Confirmed("Confirmed"),
        CONFIRMED("Confirmed");
        private final String value;
        private final static Map<String, Confidence> CONSTANTS = new HashMap<String, Confidence>();

        static {
            for (Confidence c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Confidence(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Confidence fromValue(String value) {
            Confidence constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }


    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     * 
     */
    @Generated("jsonschema2pojo")
    public enum Severity {

        Info("Info"),
        INFO("Info"),
        Unknown("Unknown"),
        UNKNOWN("Unknown"),
        Low("Low"),
        LOW("Low"),
        Medium("Medium"),
        MEDIUM("Medium"),
        High("High"),
        HIGH("High"),
        CRITICAL("Critical"),
        Critical("Critical");
        private final String value;
        private final static Map<String, Severity> CONSTANTS = new HashMap<String, Severity>();

        static {
            for (Severity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Severity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Severity fromValue(String value) {
            Severity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}

version: 2.1

executors:
  docker:
    docker:
      - image: circleci/golang:1.9

jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run: ./gradlew clean build
      - run: ./gradlew -b build-11.gradle --build-cache assemble
      - run: ./gradlew -q getVersion > build/libs/version.txt
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_artifacts:
          path: build/libs
      - persist_to_workspace:
          root: .
          paths:
            - build/libs/*
            - Dockerfile
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  sonar:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - run:
          name: Compile
          command: ./gradlew clean compileJava compileTestJava
      - sonarcloud/scan

  docker-build:
    executor: docker
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - deploy:
          name: Docker Build
          command: |
            VERSION=$(cat ./build/libs/version.txt)
            SHA1_SHORT=${CIRCLE_SHA1::7}
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} docker.io
            docker build --target java8 \
              -t ${DOCKER_REPO}:${SHA1_SHORT} \
              -t ${DOCKER_REPO}:${VERSION}-8 \
              -t ${DOCKER_REPO}:${VERSION} \
              -t ${DOCKER_REPO} \
              .
            docker build --target java11 \
              -t ${DOCKER_REPO}:${VERSION}-11 \
              .
            docker push ${DOCKER_REPO}:${SHA1_SHORT}
      - run:
          name: Archive Docker images
          command: |
            VERSION=$(cat ./build/libs/version.txt)
            docker save -o image-11.tar ${DOCKER_REPO}:${VERSION}-11
            docker save -o image-8.tar ${DOCKER_REPO}:${VERSION}-8
            docker save -o image.tar ${DOCKER_REPO}:${VERSION}
            docker save -o latest.tar ${DOCKER_REPO}:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image-11.tar
            - ./image-8.tar
            - ./image.tar
            - ./latest.tar
  
  deploy-cxflow:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster.
        type: string
      chart:
        description: |
          Specify for installation a chart reference.
        type: string
      namespace:
        default: 'default'
        description: |
          The kubernetes namespace that should be used.
        type: string
      release-name:
        default: ''
        description: |
          Specify a name for the release.
        type: string
      version:
        default: v3.1.1
        description: the helm client version to install
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Create namespace
          command: |
            export NAMESPACE_EXISTS=$(kubectl get namespaces | grep cxflow-$CIRCLE_BRANCH)
            if [[ ${NAMESPACE_EXISTS} ]]; then echo "Namespace already exists"; else kubectl create namespace cxflow-$CIRCLE_BRANCH; fi
      - run:
          name: Change appVersion
          command: |
            sed -i "s/appVersion:[[:space:]]*.*/appVersion: ${CIRCLE_SHA1::7}/g" ./helm/cxflow/Chart.yaml
      - helm/install-helm-client:
          version: << parameters.version >>
      - run:
          name: Install cxflow service on cluster 
          command: |
            helm upgrade --install --atomic --namespace << parameters.namespace >> << parameters.release-name >> \
              --set cxflow.checkmarxUsername=${CHECKMARX_USERNAME} \
              --set cxflow.checkmarxPassword=${CHECKMARX_PASSWORD} \
              --set cxflow.githubToken=${GITHUB_TOKEN} \
              --set cxflow.githubWebhookToken=${GITHUB_WEBHOOK_TOKEN} \
              --set cxflow.checkmarxClientSecret=${CHECKMARX_CLIENT_SECRET} \
              --set cxflow.jiraToken=${JIRA_TOKEN} \
              << parameters.chart >>

  component-tests:
    docker:
      - image: "circleci/openjdk:8-jdk"
    steps:
      - checkout
      - run:
          name: Run Component Tests
          command: ./gradlew clean componentTest --info
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  e2e-tests:
    docker:
      - image: "circleci/openjdk:8-jdk"
    steps:
      - checkout 
      - run:
          name: Run E2E Tests
          command: ./gradlew clean e2eTests --info -Dgithub-webhook-token=${GITHUB_WEBHOOK_TOKEN} -Dgithub-token=${GITHUB_TOKEN} -Djira-token=${JIRA_TOKEN} -Dtarget=${HOOK_TARGET} -Drepo=${HOOK_REPO} -Dnamespace=${HOOK_NAMESPACE} -Dcheckmarx-username=${CHECKMARX_USERNAME} -Dcheckmarx-password=${CHECKMARX_PASSWORD} -Dcheckmarx-client-secret=${CHECKMARX_CLIENT_SECRET} -Djira-url=${JIRA_URL} -Dcheckmarx-base-url=${BASE_URL} -Djira-username=${JIRA_USERNAME}
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  docker-push-stable:
    executor: docker
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker images
          command: |
            docker load -i /tmp/workspace/image-11.tar
            docker load -i /tmp/workspace/image-8.tar
            docker load -i /tmp/workspace/image.tar
            docker load -i /tmp/workspace/latest.tar
      - run:
          name: Publish Docker images to Docker Hub
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} docker.io
            docker push ${DOCKER_REPO}

  publish-github-release:
    docker:
      - image: circleci/golang:1.9
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=$(cat ./build/libs/version.txt)
            rm ./build/libs/version.txt
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -n ${VERSION} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./build/libs/

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1
  aws-eks: circleci/aws-eks@0.2.6
  kubernetes: circleci/kubernetes@0.4.0
  helm: circleci/helm@0.2.3

workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - sonar:
          context: sonarcloud
          filters:
            branches:
              only: develop
          requires:
            - build
      - docker-build:
          filters:
            branches:
              only: develop
          requires:
            - build
      - deploy-cxflow:
          cluster-name: eks-cxflow-ci
          chart: ./helm/cxflow
          namespace: cxflow-$CIRCLE_BRANCH
          release-name: cxflow-$CIRCLE_BRANCH
          version: v3.1.1
          filters:
            branches:
              only: develop
          requires:
            - build
            - docker-build
      - component-tests:
          requires:
            - build
      - e2e-tests:
          filters:
            branches:
              only: develop
          requires:
            - deploy-cxflow
      - docker-push-stable:
          filters:
            branches:
              only: develop
          requires:
            - e2e-tests
      - publish-github-release:
          filters:
            branches:
              only: develop
          requires:
            - e2e-tests

version: 2.1

executors:
  docker:
    docker:
      - image: circleci/golang:1.9

jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run: ./gradlew clean build
      - run: ./gradlew -b build-11.gradle --build-cache assemble
      - run: ./gradlew -q getVersion > build/libs/version.txt
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_artifacts:
          path: build/libs
      - persist_to_workspace:
          root: .
          paths:
            - build/libs/*
            - Dockerfile
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  sonar:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - run:
          name: Compile
          command: ./gradlew clean compileJava compileTestJava
      - sonarcloud/scan

  docker-build:
    executor: docker
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - deploy:
          name: Docker Build
          command: |
            VERSION=$(cat ./build/libs/version.txt)
            SHA1_SHORT=${CIRCLE_SHA1::7}
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} docker.io
            docker build --target java8 \
              -t ${DOCKER_REPO}:${SHA1_SHORT} \
              -t ${DOCKER_REPO}:${VERSION}-8 \
              -t ${DOCKER_REPO}:${VERSION} \
              -t ${DOCKER_REPO} \
              .
            docker build --target java11 \
              -t ${DOCKER_REPO}:${VERSION}-11 \
              .
            docker push ${DOCKER_REPO}:${SHA1_SHORT}
      - run:
          name: Archive Docker images
          command: |
            VERSION=$(cat ./build/libs/version.txt)
            docker save -o image-11.tar ${DOCKER_REPO}:${VERSION}-11
            docker save -o image-8.tar ${DOCKER_REPO}:${VERSION}-8
            docker save -o image.tar ${DOCKER_REPO}:${VERSION}
            docker save -o latest.tar ${DOCKER_REPO}:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image-11.tar
            - ./image-8.tar
            - ./image.tar
            - ./latest.tar

  test:
    docker:
      - image: "circleci/openjdk:8-jdk"
    steps:
      - checkout
      - run:
          name: Run Component Tests
          command: ./gradlew componentTest --info
    #  - run:
    #      name: Run Integration Tests
    #      command: ./gradlew integrationTest --info
      - run:
          name: Run e2eTests Tests
          command: ./gradlew e2eTests --info
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  docker-push:
    executor: docker
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker images
          command: |
            docker load -i /tmp/workspace/image-11.tar
            docker load -i /tmp/workspace/image-8.tar
            docker load -i /tmp/workspace/image.tar
            docker load -i /tmp/workspace/latest.tar
      - run:
          name: Publish Docker images to Docker Hub
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} docker.io
            docker push ${DOCKER_REPO}

  publish-github-release:
    docker:
      - image: circleci/golang:1.9
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=$(cat ./build/libs/version.txt)
            rm ./build/libs/version.txt
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -n ${VERSION} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./build/libs/

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1

workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - sonar:
          context: sonarcloud
          filters:
            branches:
              only: develop
          requires:
            - build
      - docker-build:
          filters:
            branches:
              only: develop
          requires:
            - build
      - test:
          filters:
            branches:
              only: staging
      - docker-push:
          filters:
            branches:
              only: develop
          requires:
            - docker-build
      - publish-github-release:
          filters:
            branches:
              only: develop
          requires:
            - build
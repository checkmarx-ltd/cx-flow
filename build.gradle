buildscript {
    ext {
        CxSBSDK = "0.5.22"
        ConfigProviderVersion = "1.0.10"
        //cxVersion = "8.90.5"
        springBootVersion = '2.7.0'
        sonarqubeVersion = '2.8'
        atlassianVersion = "5.2.0"
        atlassianFugueVersion = "4.7.2"
        jacksonVersion = "2.12.6"
        mainClassPath = 'com.checkmarx.flow.CxFlowApplication'
    }
    repositories {
//        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url = 'https://packages.atlassian.com/mvn/maven-external'
        }

        gradlePluginPortal()
    }
    dependencies {
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
    }


    /*gradle.projectsEvaluated {
         tasks.withType(JavaCompile) {
             options.compilerArgs << "-Xlint:unchecked"
         }
     }
     */
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '3.3.0'
    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0"
    id "org.sonarqube" version "2.8"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

group = 'com.checkmarx'
version = file('version.txt').text.trim()

sourceCompatibility = 1.8
def cucumberVersion = '5.7.0'
def junitVersion = '5.7.0'

repositories {
    mavenLocal()
//    jcenter()
    mavenCentral()
    maven {
        url = 'https://packages.atlassian.com/mvn/maven-external'
    }
    gradlePluginPortal()

}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-simple"
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
    all*.exclude module: 'cx-ws-fs-agent'
    all*.exclude module: 'wss-agent-api'
}

ext['tomcat.version'] = '9.0.62'
ext['groovy.version'] = '3.0.9'
ext['logback-classic.version'] = '1.2.10'
ext['spring-core.version'] = '5.3.20'

dependencies {
    compile group: 'com.beust', name: 'jcommander', version: '1.78'
    compile('org.apache.ant:ant:1.10.12')
    compile('org.springframework.boot:spring-boot-starter-actuator'){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile('org.springframework.boot:spring-boot-starter-web'){
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    
    compile('org.springframework.boot:spring-boot-starter-aop'){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile('org.springframework.boot:spring-boot-starter-validation'){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile("com.github.checkmarx-ltd:cx-spring-boot-sdk:${CxSBSDK}") {
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.bouncycastle', module:'bcprov-jdk15on'
    }
    compile("org.apache.commons:commons-text:1.8")
    compile('commons-codec:commons-codec:1.13')
    compile('commons-io:commons-io:2.8.0')
    compile('org.apache.commons:commons-lang3:3.12.0')
    compile('org.apache.commons:commons-collections4:4.4')
    compile('org.json:json:20210307')
    compile('com.fasterxml.jackson.core:jackson-databind:2.10.3')
    compile('org.springframework.boot:spring-boot-starter-web-services'){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile('org.springframework.boot:spring-boot-starter-mail'){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile('org.springframework.boot:spring-boot-starter-thymeleaf'){
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.thymeleaf', module: 'thymeleaf-spring5'
    }
    compile('com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2')
    compile("io.atlassian.fugue:fugue:${atlassianFugueVersion}")
    compile("com.atlassian.jira:jira-rest-java-client-core:${atlassianVersion}") {
        exclude group: 'org.codehaus.jackson', module: 'jackson-mapper-asl'
        exclude group: 'org.codehaus.jackson', module: 'jackson-core-asl'
    }
    compile("com.atlassian.jira:jira-rest-java-client-api:${atlassianVersion}")
    compile("com.fasterxml.jackson.core:jackson-databind:2.12.6.1")
    compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
    compile("org.apache.httpcomponents:httpclient:4.5.13")

    compile("org.thymeleaf:thymeleaf-spring5:3.0.15.RELEASE")
    implementation 'ognl:ognl:3.1.29'

    compile("org.codehaus.groovy:groovy-all:3.0.9") {
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile("org.apache.ivy:ivy:2.5.0")
    compile("org.jasypt:jasypt:1.9.3")
    compile("org.eclipse.jgit:org.eclipse.jgit:5.5.1.201910021850-r"){
        exclude group: 'org.bouncycastle', module:'bcprov-jdk15on'
    }
    compile group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
    compile("com.auth0:java-jwt:3.10.3")
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    runtime('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group:'net.minidev', module:'json-smart'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compileJava.dependsOn(processResources)
    testImplementation("io.cucumber:cucumber-java:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-junit:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-spring:${cucumberVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation('org.awaitility:awaitility:4.0.2')
    testImplementation('com.microsoft.azure:azure:1.31.1'){
        exclude group:'net.minidev', module:'json-smart'
    }
    testImplementation('com.microsoft.rest:client-runtime:1.7.1')
    testImplementation('com.microsoft.azure:azure-client-runtime:1.7.1')
    testImplementation('com.microsoft.azure:azure-client-authentication:1.7.14'){
        exclude group:'net.minidev', module:'json-smart'
    }
    testImplementation('net.minidev:json-smart:2.4.7')
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("com.github.java-json-tools:json-patch:1.11")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVersion}")
    testCompile("org.mockito:mockito-core:+")
	testCompile("net.bytebuddy:byte-buddy:1.12.9")  //Added due to Mockito Exception.Normally, Gradle should take care class path completion.
    compile("org.projectlombok:lombok:1.18.10")
    compile("ch.qos.logback:logback-classic:1.2.10"){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile("ch.qos.logback.contrib:logback-json-classic:0.1.5"){
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile("ch.qos.logback.contrib:logback-jackson:0.1.5"){
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compile("ch.qos.logback:logback-core:1.2.10")
    compile("net.logstash.logback:logstash-logback-encoder:5.2")
    compile 'org.modelmapper:modelmapper:2.4.0'
    compile("com.checkmarx:cx-config-provider:${ConfigProviderVersion}") {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
        		    
    }
    compile("org.apache.logging.log4j:log4j-core:2.17.1")
    compile("org.apache.logging.log4j:log4j-slf4j-impl:2.17.1")
    compile("org.apache.logging.log4j:log4j-api:2.17.1")
    compile("javax.persistence:javax.persistence-api:2.2")
    compile group:'org.apache.tomcat', name:'tomcat-juli', version:property('tomcat.version')
    compile group:'org.springframework', name:'spring-core', version:property('spring-core.version')

    implementation group: 'com.sendgrid', name: 'sendgrid-java', version: '4.9.0'
}

springBoot {
    mainClass = "${mainClassPath}"
    buildInfo()
}

bootJar {
    mainClass = "${mainClassPath}"
}

jar {
    enabled = false
}

test {

    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "checkmarx-ltd_cx-flow"
        property "sonar.organization", "checkmarx-ltd"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.binaries", "./build/classes"
    }
}

task unitTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "unit"

        include 'com/checkmarx/flow/test/flow**'
        include 'com/checkmarx/flow/exception/**'
        include 'com/checkmarx/flow/custom/**'
        include 'com/checkmarx/flow/controller**'
        include 'com/checkmarx/flow/filter/**'
        include 'com/checkmarx/flow/service/**'
        include 'com/checkmarx/flow/utils/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task componentTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "component"

        include 'com/checkmarx/flow/cucumber/component/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
    //check.dependsOn.remove(test)
    test.enabled = false
}


task e2eTests(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "e2e"

        include 'com/checkmarx/flow/cucumber/integration/end2end/genericendtoend/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    //check.dependsOn.remove(test)
    test.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "integration"

        include 'com/checkmarx/flow/cucumber/integration/github/**'
        include 'com/checkmarx/flow/cucumber/integration/azure/publishing/**'
        include 'com/checkmarx/flow/cucumber/integration/azure/publishing/github2ado/*'
        include 'com/checkmarx/flow/cucumber/integration/cxconfig/*'
        include 'com/checkmarx/flow/cucumber/integration/config_provider/**'
        include 'com/checkmarx/flow/cucumber/integration/cxconfigbugtracker/**'
        include 'com/checkmarx/flow/cucumber/integration/multiScmInstances/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task ScaIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "scaIntegration"

        include 'com/checkmarx/flow/cucumber/integration/sca_scanner/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task ASTIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "astIntegration"

        include 'com/checkmarx/flow/cucumber/integration/ast/bugtrackers/jira/**'
        include  'com/checkmarx/flow/cucumber/integration/ast/scans/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task JiraIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "jiraIntegration"

        include 'com/checkmarx/flow/cucumber/integration/jira/manualconfig/**'
        include 'com/checkmarx/flow/cucumber/integration/jira/autoconfig/*'
        include 'com/checkmarx/flow/cucumber/integration/jira/analytics/*'
        include 'com/checkmarx/flow/cucumber/integration/publishprocess/**'
        include 'com/checkmarx/flow/cucumber/integration/negative_tests/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task PullRequestCommnetsIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "pullrequestCommentIntegration"
        include 'com/checkmarx/flow/cucumber/integration/pullrequest/updatecomments/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task SastCliIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "sastCliIntegration"

        include 'com/checkmarx/flow/cucumber/integration/cli/sast/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task AstCliIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "astCliIntegration"

        include 'com/checkmarx/flow/cucumber/integration/cli/ast/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task ScaCliIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "scaCliIntegration"

        include 'com/checkmarx/flow/cucumber/integration/cli/sca/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task CxGoIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "cxgoIntegration"

        include 'com/checkmarx/flow/cucumber/integration/cxgo/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task CodeBashingIntegrationTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "codebashingIntegration"

        include 'com/checkmarx/flow/cucumber/integration/codebashing/**'

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}


task getVersion {
    doLast {
        println "${version}"
    }
}

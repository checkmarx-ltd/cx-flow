buildscript {
	ext {
        CxSBSDK = "0.4.9"
        //cxVersion = "8.90.5"
        springBootVersion = '2.2.4.RELEASE'
        sonarqubeVersion = '2.8'
        atlassianVersion = "5.2.0"
        atlassianFugueVersion = "4.7.2"
        mainClass='com.checkmarx.flow.CxFlowApplication'
    }
	repositories {
        jcenter()
        mavenLocal()
		mavenCentral()
        maven {
            url = 'https://packages.atlassian.com/mvn/maven-external'
        }
        gradlePluginPortal()
	}
	dependencies {
        classpath ("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
    }


   /*gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
    */
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '3.3.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

group = 'com.checkmarx'
version = '1.5.4'
sourceCompatibility = 1.8
def cucumberVersion = '4.7.4'
def junitVersion = '5.5.0'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://packages.atlassian.com/mvn/maven-external'
    }
    gradlePluginPortal()

}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-aop')
    compile("com.github.checkmarx-ts:cx-spring-boot-sdk:${CxSBSDK}")
    compile ("org.apache.commons:commons-text:1.8")
    compile ('commons-codec:commons-codec:1.13')
    compile ('commons-io:commons-io:2.6')
    compile ('org.apache.commons:commons-lang3:3.9')
    compile ('org.json:json:20190722')
    compile ('com.fasterxml.jackson.core:jackson-databind')
    compile ('org.springframework.boot:spring-boot-starter-web-services')
    compile ('org.springframework.boot:spring-boot-starter-mail')
    compile ('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile ('com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2')
    compile ("io.atlassian.fugue:fugue:${atlassianFugueVersion}")
    compile ("com.atlassian.jira:jira-rest-java-client-core:${atlassianVersion}")
    compile ("com.atlassian.jira:jira-rest-java-client-api:${atlassianVersion}")
    compile ("org.apache.httpcomponents:httpclient:4.5.10")
    compile ("org.thymeleaf:thymeleaf:3.0.11.RELEASE")
    compile ("org.codehaus.groovy:groovy-all:2.5.8")
    compile ("org.apache.ivy:ivy:2.5.0")
    compile ("org.eclipse.jgit:org.eclipse.jgit:5.5.1.201910021850-r")
    compileOnly ('org.springframework.boot:spring-boot-configuration-processor')
    runtime('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    compileJava.dependsOn(processResources)
    testImplementation("io.cucumber:cucumber-java:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-junit:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-spring:${cucumberVersion}")
    testImplementation( "org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation('org.awaitility:awaitility:4.0.2')
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("com.github.java-json-tools:json-patch:1.11")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVersion}")
    testCompile("org.mockito:mockito-core:+")
    compile("org.projectlombok:lombok:1.18.10")
}

springBoot {
    mainClassName = "${mainClass}"
    buildInfo()
}

bootJar {
    mainClassName = "${mainClass}"
}

test {
    useJUnit {
        systemProperty "testprofile", "unit"
        if (System.properties['testprofile'] != 'integration') {
            exclude 'com/checkmarx/flow/cucumber/integration/**'
        }else{
            exclude 'com/checkmarx/**'
            include 'com/checkmarx/flow/cucumber/integration/**'
        }
    }
}

task integrationTest(type: Test) {
    useJUnit {
        systemProperty "testprofile", "integration"

    }
}

task getVersion {
    doLast {
        println "${version}"
    }
}

test {
    useJUnitPlatform()
}

task componentTest(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "component"
        if (System.properties['testprofile'] != 'integration' | System.properties['testprofile'] != 'unit') {
            exclude 'com/checkmarx/flow/cucumber/integration/**'
            exclude 'com/checkmarx/flow/test/flow**'
            exclude 'com/checkmarx/flow/exception/**'
            exclude 'com/checkmarx/flow/custom/**'
            exclude 'com/checkmarx/flow/controller**'
            exclude 'com/checkmarx/flow/filter/**'
            exclude 'com/checkmarx/flow/service/**'
            exclude 'com/checkmarx/flow/utils/**'
           exclude 'com/checkmarx/flow/cucumber/integration/end2end/github2jira**'

        } else {
            include 'com/checkmarx/flow/cucumber/component/**'
        }
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
    check.dependsOn.remove(test)
}

task e2eTests(type: Test) {
    useJUnitPlatform() {
        systemProperty "testprofile", "e2e"
        if (System.properties['testprofile'] != 'integration' | System.properties['testprofile'] != 'unit'|System.properties['testprofile'] != 'component')
        {
            exclude 'com/checkmarx/flow/cucumber/component/**'
            exclude 'com/checkmarx/flow/integration/**'
            exclude 'com/checkmarx/flow/cucumber/integration/publishprocess/**'
            exclude 'com/checkmarx/flow/cucumber/integration/github/**'
            exclude 'com/checkmarx/flow/cucumber/integration/negative_tests/**'
            exclude 'com/checkmarx/flow/test/flow**'
            exclude 'com/checkmarx/flow/exception/**'
            exclude 'com/checkmarx/flow/custom/**'
            exclude 'com/checkmarx/flow/controller**'
            exclude 'com/checkmarx/flow/filter/**'
            exclude 'com/checkmarx/flow/service/**'
            exclude 'com/checkmarx/flow/utils/**'
            exclude 'com.checkmarx.flow.CxFlowApplicationTest'
            exclude 'com/checkmarx/flow/cucumber/integration/publishprocess/*'
            exclude 'com/checkmarx/flow/cucumber/integration/scan/*'
        } else {
            //exclude 'com/checkmarx/**'
            include 'com/checkmarx/flow/cucumber/integration/end2end/github2jira/**'
        }
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
    check.dependsOn.remove(test)
}